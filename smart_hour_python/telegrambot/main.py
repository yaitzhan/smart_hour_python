"""
–ü—Ä–æ—Å—Ç–æ–π echo –±–æ—Ç.

–°–º–∞—Ä—Ç—á–∞—Å "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å Python"

–ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ –∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω –≤ API_TOKEN

"""

import logging

from aiogram import Bot, Dispatcher, executor, types

# —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç @BotFather
API_TOKEN = ''

# –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    """
    –û–ø–µ—Ä–∞—Ç–æ—Ä, –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—â–∏–π —Å–æ–±—ã—Ç–∏–µ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª `/start`
    """
    # –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å —Ç–µ–∫—Å—Ç
    text = "–ü—Ä–∏–≤–µ—Ç, —è –ø—Ä–æ—Å—Ç–æ–π –±–æ—Ç"
    await message.reply(text)


@dp.message_handler(commands=['help'])
async def send_welcome(message: types.Message):
    """
    –û–ø–µ—Ä–∞—Ç–æ—Ä, –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—â–∏–π —Å–æ–±—ã—Ç–∏–µ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª `/help`
    """
    # –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å —Ç–µ–∫—Å—Ç
    text = "–°–ø–µ—à—É –Ω–∞ –ø–æ–º–æ—â—å!"
    await message.reply(text)


@dp.message_handler(regexp='–∫–æ—Ç')
async def cats(message: types.Message):
    # –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ñ–∞–π–ª
    with open('data/cat.jpg', 'rb') as photo:
        """
        –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É "–∫–æ—Ç" –∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —á—Ç–æ –ø–æ–ª—É—á–∏—Ç—Å—è
        """
        await message.reply_photo(photo, caption='Not bad üò∫')


@dp.message_handler()
async def echo(message: types.Message):
    """
    –ü—Ä–æ—Å—Ç–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ä–∞–Ω–Ω–µ–µ —é–∑–µ—Ä–æ–º —Ç–µ–∫—Å—Ç
    """
    await message.answer(message.text)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
